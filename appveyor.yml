# Based on appveyor.yml from https://github.com/Toblerity/Fiona/blob/master/appveyor.yml
environment:

  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
    GDAL_HOME: "C:\\gdal"
    PYTHON_ARCH: "64"

  matrix:

    # For Python versions available on Appveyor, see
    # https://www.appveyor.com/docs/windows-images-software/#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

    # Python 3.6, GDAL 2.3
    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.4"
      GDAL_VERSION: "2.3.0"
      GIS_INTERNALS: "release-1911-x64-gdal-2-3-0-mapserver-7-0-7.zip"
      GIS_INTERNALS_LIBS: "release-1911-x64-gdal-2-3-0-mapserver-7-0-7-libs.zip"

install:
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "SET PYTHONPATH=%PYTHON%\\Lib\\site-packages;%PYTHONPATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  - ps: mkdir C:\build | out-null
  - ps: mkdir C:\gdal | out-null

  - curl http://download.gisinternals.com/sdk/downloads/%GIS_INTERNALS% --output gdalbin.zip
  - 7z x gdalbin.zip -oC:\gdal
  - curl http://download.gisinternals.com/sdk/downloads/%GIS_INTERNALS_LIBS% --output gdallibs.zip
  - 7z x gdallibs.zip -oC:\gdal
  - "SET PATH=C:\\gdal;C:\\gdal\\bin;C:\\gdal\\data;C:\\gdal\\bin\\gdal\\apps;%PATH%"
  - "SET GDAL_DATA=C:\\gdal\\bin\\gdal-data"
  - "SET PACKAGE_DATA=1"

  - ECHO "Filesystem C:/GDAL:"
  - ps: "ls \"C:/GDAL\""


  - cd C:\projects\trackintel
  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - cmd: python -m pip install --disable-pip-version-check --user --upgrade pip

  - cmd: pip --version

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  # - "%CMD_IN_ENV% pip install -r requirements-dev.txt"

  # We need wheel installed to build wheels
  - "%PYTHON%\\python.exe -m pip install pytest wheel"
  - "%PYTHON%\\python.exe -m pip install ."

build: off

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  - "%PYTHON%\\python.exe -m pytest"

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - "%PYTHON%\\python.exe setup.py bdist_wheel"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.